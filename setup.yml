- name: Setup development environment
  hosts: localhost
  become: yes

  vars_files:
    - vars.yml

  vars:
    nginx_port: 8082
    laravel_directory: /var/www/laravel
    vue_directory: /var/www/vue
    ansible_python_interpreter: /usr/bin/python3
    php_version: "8.1"
    node_version: "16"

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Check if vars.yml exists
      stat:
        path: vars.yml
      register: vars_file
    
    - name: Copy vars.yml.example to vars.yml if vars.yml does not exist
      copy:
        src: vars.yml.example
        dest: vars.yml
        remote_src: yes
      when: not vars_file.stat.exists

    - name: Install dependencies for adding PPAs
      apt:
        name: software-properties-common
        state: present

    - name: Add PHP PPA
      apt_repository:
        repo: ppa:ondrej/php
        state: present
        update_cache: yes

    - name: Install PHP 8.1 and related modules
      apt:
        name:
          - php8.1
          - php8.1-cli
          - php8.1-mysql
          - php8.1-xml
          - php8.1-mbstring
          - php8.1-curl
          - php8.1-zip
          - php8.1-fpm
        state: present

    - name: Install necessary packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - nginx
        - debconf-utils
        - python3-pip
        - python3-mysqldb
        - nodejs
        - npm
        - curl

    - name: Install Node.js version manager (nvm)
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      args:
        executable: /bin/bash

    - name: Install specific version of Node.js
      shell: |
        source ~/.nvm/nvm.sh
        nvm install {{ node_version }}
      args:
        executable: /bin/bash
      environment:
        NVM_DIR: "/home/{{ ansible_facts['user'] | default('ubuntu') }}/.nvm"

    - name: Find the PHP-FPM socket path dynamically
      shell: "find /var/run/php -name 'php*-fpm.sock' | head -n 1"
      register: php_fpm_socket_path
      changed_when: false

    - name: Configure Nginx to use PHP 8.1 and listen on port {{ nginx_port }}
      ansible.builtin.blockinfile:
        path: /etc/nginx/sites-available/default
        create: yes
        block: |
          server {
              listen {{ nginx_port }};
              server_name quentinfranklin.com;

              root /var/www/laravel/public;
              index index.php index.html index.htm;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  include fastcgi_params;
              }

              location ~ /\.ht {
                  deny all;
              }
          }

    - name: Check Nginx configuration syntax
      command: nginx -t
      ignore_errors: yes
      register: nginx_config_check

    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes
      when: nginx_config_check.rc == 0

    - name: Reload Nginx to apply configuration changes
      service:
        name: nginx
        state: reloaded
      when: nginx_config_check.rc == 0

    - name: Set MySQL root password for installation
      ansible.builtin.shell: |
        echo "mysql-server mysql-server/root_password password {{ mysql_root_password }}" | debconf-set-selections
        echo "mysql-server mysql-server/root_password_again password {{ mysql_root_password }}" | debconf-set-selections

    - name: Install MySQL server
      ansible.builtin.apt:
        name: mysql-server
        state: present

    - name: Run mysql_secure_installation equivalent
      ansible.builtin.command: |
        mysql -u root -p'{{ mysql_root_password }}' -e "DELETE FROM mysql.user WHERE User=''; FLUSH PRIVILEGES;"

    - name: Create MySQL database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Create MySQL user with privileges
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        host: "localhost"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Delete /var/www/laravel and /var/www/vue directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/www/laravel
        - /var/www/vue

    - name: Install Composer
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-installer.php
        mode: '0755'

    - name: Run Composer Installer
      command: php /tmp/composer-installer.php --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer

    - name: Clone Laravel repository
      git:
        repo: 'https://github.com/qfranklin/laravel.git'
        dest: "{{ laravel_directory }}"
        version: main

    - name: Clone Vue repository
      git:
        repo: 'https://github.com/qfranklin/vue.git'
        dest: "{{ vue_directory }}"
        version: main

    - name: Install Laravel dependencies with Composer
      command: composer install
      args:
        chdir: "{{ laravel_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        COMPOSER_ALLOW_SUPERUSER: "1"

    - name: Install NPM dependencies for Vue
      command: npm install
      args:
        chdir: "{{ vue_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Configure Laravel .env
      template:
        src: env.j2
        dest: "{{ laravel_directory }}/.env"
        mode: '0644'
      notify: Generate Laravel app key

    - name: Generate Laravel app key
      command: php artisan key:generate
      args:
        chdir: "{{ laravel_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Run Laravel migrations
      command: php artisan migrate
      args:
        chdir: "{{ laravel_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Compile Vue assets
      command: npm run build
      args:
        chdir: "{{ vue_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Ensure the www-data group exists
      ansible.builtin.group:
        name: www-data
        state: present

    - name: Ensure the www-data user exists
      ansible.builtin.user:
        name: www-data
        group: www-data
        shell: /usr/sbin/nologin
        state: present
        system: yes

    - name: Set ownership for Laravel directories
      file:
        path: /var/www/laravel
        owner: www-data
        group: www-data
        recurse: yes

    - name: Set permissions for storage and bootstrap/cache directories
      file:
        path: "{{ item }}"
        mode: '775'
        recurse: yes
      loop:
        - /var/www/laravel/storage
        - /var/www/laravel/bootstrap/cache

  handlers:
    - name: Generate Laravel app key
      command: php artisan key:generate
      args:
        chdir: "{{ laravel_directory }}"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
